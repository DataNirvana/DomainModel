using System;

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
namespace MGL.DomainModel {

    //---------------------------------------------------------------------------------------------------------------------------------------------------------------------
    /// <summary>
    ///     29-Jan-2015 - Records the processing state of a thread using to manage a heavy website task asyncronously
    ///     Designed to be contained in a static dictionary with the session ID as the key so that only one process can be run
    ///     simultaneously in each thread and a warning would be generated otherwise.
    /// </summary>
    public class ProcessingState {

        //-----------------------------------------------------------------------------------------------------------------------------------------------------------------
        public ProcessingState() {
        }
        //-----------------------------------------------------------------------------------------------------------------------------------------------------------------
        public ProcessingState(string seshID) {
            this.id = seshID;
        }

        //-----------------------------------------------------------------------------------------------------------------------------------------------------------------
        /// <summary>
        ///     The primary key for the processing state - normally the session ID ....
        /// </summary>
        private string id = "";
        public string ID {
            get { return id; }
            set { id = value; }
        }

        //-----------------------------------------------------------------------------------------------------------------------------------------------------------------
        /// <summary>
        ///     Indicates whether the thread that this process is running in or not is active
        /// </summary>
        private bool isRunning = false;
        public bool IsRunning {
            get { return isRunning; }
            set { isRunning = value; }
        }

        //-----------------------------------------------------------------------------------------------------------------------------------------------------------------
        /// <summary>
        ///     The progress achieved by the process - a number between 0 and 100
        /// </summary>
        private int progress = 0;
        public int Progress {
            get { return progress; }
            set { progress = value; }
        }

        //-----------------------------------------------------------------------------------------------------------------------------------------------------------------
        /// <summary>
        ///     The message generated by the process, normally upon completion
        /// </summary>
        private string message = "";
        public string Message {
            get { return message; }
            set { message = value; }
        }


        //-----------------------------------------------------------------------------------------------------------------------------------------------------------------
        /// <summary>
        ///     The data created by the process - e.g. an excel file
        /// </summary>
        private byte[] data = null;
        public byte[] Data {
            get { return data; }
            set { data = value; }
        }


        //-----------------------------------------------------------------------------------------------------------------------------------------------------------------
        /// <summary>
        ///     1 = Success 2 = Warning 3 = Failed
        /// </summary>
        private int finalState = 0;
        public int FinalState {
            get { return finalState; }
            set { finalState = value; }
        }


    }
}
